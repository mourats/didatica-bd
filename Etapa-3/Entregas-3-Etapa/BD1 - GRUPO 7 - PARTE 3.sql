/* GRUPO 7:
Beatriz Alice Alves Santos Azevedo
José Guilherme Coelho de Oliveira
Mariana Silva Nascimento
Siuanny Barbosa dos Santos Rocha */

-- 1. Liste todos os dados dos clientes que compraram em 2019 e que realizaram mais de 3 reclamações em 2018.
SELECT * FROM CLIENTE C
WHERE ((SELECT COUNT(*)  FROM ORDEM_COMPRA O  
   	    WHERE O.CPF_CLIENTE = C.CPF AND O.DATA_HORA BETWEEN TO_DATE('2019/01/01','yyyy/mm/dd') AND TO_DATE('2019/12/31', 'yyyy/mm/dd') ) >= 1)
        AND ((SELECT COUNT(*) FROM REALIZA_RECLAMACAO R
    	WHERE R.CPF_CLIENTE = C.CPF AND R.DATA_HORA BETWEEN TO_DATE('2018/01/01','yyyy/mm/dd') AND TO_DATE('2018/12/31', 'yyyy/mm/dd') ) > 3);

-- 2. Qual o número total de solicitações realizadas em 2018 pela filial ‘Campina’?
SELECT COUNT(*) AS NUM_SOLICITACOES
FROM SOLICITACAO S, FILIAL F
WHERE S.DATA_SOLICITACAO BETWEEN TO_DATE('2018/01/01','yyyy/mm/dd') AND TO_DATE('2018/12/31', 'yyyy/mm/dd') AND S.CODIGO_FILIAL = F.CODIGO_IDENTIFICACAO AND F.NOME = 'Campina';

-- 3. Qual o número do caixa com mais equipamentos que realizaram manutenção?
SELECT CAIXA FROM (SELECT C.NUMERO_CAIXA AS CAIXA, E.NUMERO_CAIXA, E.IDENTIFICADOR, M.IDENTIFICADOR_EQUIPAMENTO , COUNT(*) I 
FROM CAIXA C, EQUIPAMENTO E, REALIZA_MANUTENCAO M
WHERE C.NUMERO_CAIXA = E.NUMERO_CAIXA AND E.IDENTIFICADOR = M.IDENTIFICADOR_EQUIPAMENTO
GROUP BY C.NUMERO_CAIXA, E.NUMERO_CAIXA, E.IDENTIFICADOR, M.IDENTIFICADOR_EQUIPAMENTO
ORDER BY I DESC)
WHERE ROWNUM <= 1;

-- 4. Crie uma view que exibe a quantidade dos produtos estocados junto ao nome do produto e nome da filial.
CREATE OR REPLACE VIEW PRODUTOS_ESTOCADOS(QUANTIDADE, NOME, FILIAL) 
AS SELECT P.QUANTIDADE, P.NOME, F.NOME
FROM PRODUTO P
JOIN FILIAL F ON (F.CODIGO_IDENTIFICACAO = P.CODIGO_FILIAL);

-- 5. Quais os nomes dos clientes que gastaram menos de R$1.000,00?
SELECT DISTINCT NOME 
FROM CLIENTE C, ORDEM_COMPRA O
WHERE ((SELECT SUM(N.QUANTIDADE * N.VALOR_POR_ITEM ) FROM NOTA_FISCAL N
  	    WHERE O.NUMERO_NOTA_FISCAL = N.NUMERO  ) < 1000 AND O.CPF_CLIENTE = C.CPF ) OR (C.CPF NOT IN (SELECT CPF_CLIENTE AS CPF FROM ORDEM_COMPRA R
        WHERE C.CPF = R.CPF_CLIENTE));

-- 6. Liste o CNPJ, nome e um telefone dos fornecedores que receberam solicitações de ao menos R$10.000,00.
SELECT DISTINCT  T.CNPJ, F.NOME, (SELECT TELEFONE FROM TELEFONE_FORNECEDOR WHERE CNPJ = F.CNPJ AND ROWNUM = 1) AS TEL 
FROM TELEFONE_FORNECEDOR T, FORNECEDOR F, SOLICITACAO S
WHERE T.CNPJ = F.CNPJ AND S.VALOR_COMPRA > 10000;

-- 7. Liste a matrícula e nome dos funcionários da função 'Empacotador' em ordem decrescente por número de dependentes.
SELECT F.MATRICULA, F.NOME
FROM FUNCIONARIO F
LEFT JOIN DEPENDENTE D ON (F.MATRICULA = D.MATRICULA_FUNCIONARIO)
WHERE F.FUNCAO = 'Empacotador'
GROUP BY F.MATRICULA, F.NOME
ORDER BY COUNT(D.MATRICULA_FUNCIONARIO) DESC;

-- 8. Liste todos os dados do equipamentos da filial ‘Jampa’ que nunca sofreram manutenção.
SELECT * 
FROM EQUIPAMENTO E, FILIAL F, CAIXA C
WHERE NOT EXISTS (SELECT * FROM REALIZA_MANUTENCAO R
             	  WHERE E.IDENTIFICADOR = R.IDENTIFICADOR_EQUIPAMENTO) AND (F.NOME = 'JAMPA') AND (F.CODIGO_IDENTIFICACAO = C.CODIGO_FILIAL  ) AND (E.NUMERO_CAIXA = C.NUMERO_CAIXA)

-- 9. Liste todos os dados das 5 manutenções mais caras realizadas entre 2017 e 2019.
SELECT * 
FROM REALIZA_MANUTENCAO P
WHERE P.DATA_HORA BETWEEN TO_DATE ('2017/01/01', 'YYYY/MM/DD') AND TO_DATE ('2019/12/31', 'YYYY/MM/DD') AND ROWNUM <= 5
ORDER BY P.CUSTO;

-- 10. Quais os nomes dos produtos que a soma das vendas não ultrapassam R$ 500,00?
SELECT P.NOME 
FROM  PRODUTO P
WHERE (SELECT SUM(I.QUANTIDADE * I.PRECO_PRODUTO ) VALOR FROM ITEM I WHERE P.CODIGO_IDENTIFICACAO = I.CODIGO_PRODUTO) < 500;

-- 11. Liste todos os dados das reclamações realizadas somente pelos clientes com a palavra “João” no nome.
SELECT R.ID_RECLAMACAO, R.DATA_HORA, R.DESCRICAO, R.CODIGO_FILIAL, R.CPF_CLIENTE
FROM CLIENTE C, REALIZA_RECLAMACAO R
WHERE C.CPF = R.CPF_CLIENTE AND C.NOME LIKE '%JOÃO%';

-- 12. Crie uma view que lista o codigo de identificacao (ERRADO - CNPJ) e nome das filiais onde a quantidade de solicitações para diferentes fornecedores é maior que 10.
CREATE OR REPLACE VIEW FILIAIS_COM_SOLICITACOES_MAIORES_QUE_10(CODIGO_IDENTIFICACAO, NOME)
AS SELECT F.CODIGO_IDENTIFICACAO, F.NOME
FROM FILIAL F
WHERE (SELECT COUNT(S.CODIGO_FILIAL) FROM SOLICITACAO S WHERE S.CODIGO_FILIAL = F.CODIGO_IDENTIFICACAO) > 10 AND (SELECT COUNT(DISTINCT S.CNPJ_FORNECEDOR) FROM SOLICITACAO S WHERE S.CODIGO_FILIAL = F.CODIGO_IDENTIFICACAO) > 1;

-- 13. Crie uma view que lista todos os dados do produtos mais comprados no ano de 2019.
CREATE OR REPLACE VIEW VWPRODUTOSVENDIDOS AS
    SELECT SUM(I.QUANTIDADE) QTD , P.CODIGO_IDENTIFICACAO , P.NOME, P.DESCRICAO, P.MARGEM_LUCRO, P.CODIGO_FILIAL, P.QUANTIDADE, P.PRECO_COMPRA, P.PRECO_VENDA, P.DATA_COMPRA, P.DATA_VALIDADE, P.ID_MARCA, P.ID_CATEGORIA  
    FROM ITEM I, PRODUTO P , NOTA_FISCAL N 
    WHERE P.CODIGO_IDENTIFICACAO = I.CODIGO_PRODUTO AND N.NUMERO =  I.NUMERO_NOTA_FISCAL AND ( N.DATA BETWEEN TO_DATE ('2019/01/01','YYYY/MM/DD') AND TO_DATE ('2019/12/31', 'YYYY/MM/DD'))
    GROUP BY P.CODIGO_IDENTIFICACAO, P.NOME, P.DESCRICAO, P.MARGEM_LUCRO, P.CODIGO_FILIAL, P.QUANTIDADE, P.PRECO_COMPRA, P.PRECO_VENDA, P.DATA_COMPRA, P.DATA_VALIDADE, P.ID_MARCA, P.ID_CATEGORIA
    ORDER BY QTD DESC;

-- 14. Modifique a tabela SOLICITACAO, adicionando uma restrição de integridade que valide se o prazo para pagamento em dias é no máximo 90 dias maior do que a data da solicitação.
ALTER TABLE SOLICITACAO ADD CONSTRAINT CK_PRAZO_PAG_MAIOR_QUE_90_DIAS CHECK ((PRAZO_PAGAMENTO - DATA_SOLICITACAO) <= 90);

--  == ANULADA ==
-- 15. Crie um trigger que impeça que um item seja inserido na ordem de compra caso o produto esteja vencido.
--  == ANULADA ==

-- 16. Crie um trigger que não permita estocar produtos com quantidade menor ou igual a zero.
CREATE TRIGGER MENOR_ZERO
BEFORE INSERT OR UPDATE OF QUANTIDADE ON PRODUTO
FOR EACH ROW
BEGIN
	IF(:NEW.QUANTIDADE <= 0) THEN
	RAISE_APPLICATION_ERROR(-20000, 'NO PRODUCT, NO DOLAR');  
	END IF;
END;

-- 17. Crie um trigger que não permita inserir solicitações com valor de compra menor que R$100,00.
CREATE OR REPLACE TRIGGER IMPEDE_SOLICITACAO_MENOR_QUE_CEM 
BEFORE INSERT OR UPDATE OF VALOR_COMPRA ON SOLICITACAO
FOR EACH ROW
BEGIN
    IF(:NEW.VALOR_COMPRA < 100.0) THEN
        RAISE_APPLICATION_ERROR(-20000, 'O VALOR DE COMPRA NÃO PODE SER MENOR QUE R$100!');  
    END IF;
END;

-- 18. Crie um visão que mostra todos os dados dos produtos que venderam menos do que a média de suas vendas em 2018.
CREATE VIEW VWMENOR_QUE_A_MEDIA AS
SELECT  ESSE_ANO.QTD, ESSE_ANO.CODIGO_IDENTIFICACAO, ESSE_ANO.NOME, ESSE_ANO.DESCRICAO, ESSE_ANO.MARGEM_LUCRO, ESSE_ANO.CODIGO_FILIAL, ESSE_ANO.QUANTIDADE, ESSE_ANO.PRECO_COMPRA, ESSE_ANO.PRECO_VENDA, ESSE_ANO.DATA_COMPRA, ESSE_ANO.DATA_VALIDADE, ESSE_ANO.ID_MARCA, ESSE_ANO.ID_CATEGORIA 
FROM (SELECT AVG(I.QUANTIDADE)  QTD,  P.CODIGO_IDENTIFICACAO, P.NOME, P.DESCRICAO, P.MARGEM_LUCRO, P.CODIGO_FILIAL, P.QUANTIDADE, P.PRECO_COMPRA, P.PRECO_VENDA, P.DATA_COMPRA, P.DATA_VALIDADE, P.ID_MARCA, P.ID_CATEGORIA FROM ITEM I, PRODUTO P , NOTA_FISCAL N
WHERE I.CODIGO_PRODUTO  = P.CODIGO_IDENTIFICACAO AND N.NUMERO = I.NUMERO_NOTA_FISCAL AND N.DATA BETWEEN TO_DATE ('2018/01/01', 'YYYY/MM/DD') AND TO_DATE ('2018/12/31', 'YYYY/MM/DD')
GROUP BY  P.CODIGO_IDENTIFICACAO, P.NOME, P.DESCRICAO, P.MARGEM_LUCRO, P.CODIGO_FILIAL, P.QUANTIDADE, P.PRECO_COMPRA, P.PRECO_VENDA, P.DATA_COMPRA, P.DATA_VALIDADE, P.ID_MARCA, P.ID_CATEGORIA) ANO_PASSADO , 
(SELECT AVG(I.QUANTIDADE)  QTD, P.CODIGO_IDENTIFICACAO, P.NOME, P.DESCRICAO, P.MARGEM_LUCRO, P.CODIGO_FILIAL, P.QUANTIDADE, P.PRECO_COMPRA, P.PRECO_VENDA, P.DATA_COMPRA, P.DATA_VALIDADE, P.ID_MARCA, P.ID_CATEGORIA FROM ITEM I, PRODUTO P , NOTA_FISCAL N
WHERE I.CODIGO_PRODUTO  = P.CODIGO_IDENTIFICACAO AND N.NUMERO = I.NUMERO_NOTA_FISCAL AND N.DATA BETWEEN TO_DATE ('2019/01/01', 'YYYY/MM/DD') AND TO_DATE ('2019/12/31', 'YYYY/MM/DD')
GROUP BY   P.CODIGO_IDENTIFICACAO, P.NOME, P.DESCRICAO, P.MARGEM_LUCRO, P.CODIGO_FILIAL, P.QUANTIDADE, P.PRECO_COMPRA, P.PRECO_VENDA, P.DATA_COMPRA, P.DATA_VALIDADE, P.ID_MARCA, P.ID_CATEGORIA ) ESSE_ANO
WHERE ANO_PASSADO.QTD > ESSE_ANO.QTD AND ANO_PASSADO.CODIGO_IDENTIFICACAO = ESSE_ANO.CODIGO_IDENTIFICACAO;

-- 19. Crie uma stored procedure chamada aumentaSalarioByFilial que deve receber como parâmetros o identificador de uma filial e um valor percentual e aplicar o aumento salarial de todos os funcionários da filial. Coloque no script também o código de como executar a procedure.
/* COMO EXECUTAR
    PARA EXECUTAR USE O SEGUINTE COMANDO DE EXEMPLO:

    BEGIN
        aumentaSalarioByFilial(numFilial => 1, percentual => 10);
    END;

    EM numFilial COLOQUE QUAL ID DA FILIAL QUE VOCÊ QUER AUMENTAR O SALARIOS DOS FUNCIONARIOS (EXEMPLO: numFilial => 1)
    EM percentual COLOQUE QUAL O PERCENTUAL VOCE DESEJA ADICIONAR AO SALARIO DESSES FUNCIONARIOS (EXEMPLO: percentual => 10)
*/
CREATE OR REPLACE PROCEDURE aumentaSalarioByFilial(numFilial FILIAL.CODIGO_IDENTIFICACAO%TYPE, percentual NUMBER) AS 
BEGIN
    IF (percentual <= -100) THEN
	    RAISE_APPLICATION_ERROR(-20000, 'O salario nao pode ser zerado ou negativado');  
	END IF;
    UPDATE FUNCIONARIO
    SET SALARIO = SALARIO * (1 + percentual/100)
    WHERE (SELECT CODIGO_IDENTIFICACAO FROM FILIAL WHERE CODIGO_IDENTIFICACAO = FUNCIONARIO.CODIGO_FILIAL) = numFilial;
END;

-- 20. Crie uma stored procedure chamada getMaiorMargemDeLucro que deve receber como parâmetros o identificador de uma marca e o identificador de uma categoria e retornar o produto que possui a maior margem de lucro da marca e categoria informada. Coloque no script também o código de como executar a procedure. */
/* BEGIN
        getMaiorMargemDeLucro(identificadorMarca => 1, identificadorCategoria => 3); (EXEMPLO)
    END;
*/
CREATE OR REPLACE PROCEDURE getMaiorMargemDeLucro(identificadorMarca MARCA.IDENTIFICADOR%TYPE, identificadorCategoria CATEGORIA.IDENTIFICADOR%TYPE) IS
    R SYS_REFCURSOR;  
BEGIN
    OPEN R FOR SELECT * FROM PRODUTO P WHERE (SELECT MAX(MARGEM_LUCRO) FROM PRODUTO) = P.MARGEM_LUCRO AND P.ID_MARCA = 1 AND P.ID_CATEGORIA = 3 AND ROWNUM = 1;
    DBMS_SQL.RETURN_RESULT(R);
END;